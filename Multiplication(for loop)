/ Multiplication(for loop).cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//



// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件

#include <iostream>
#include <iomanip>
int main()
{
	using namespace std;
	int i = 1;
	int j = 1;
	int sum = 0;
	for (i = 1; i < 10; i=i+1)
	{
		for (j = 1; j < i + 1; j=j+1)
			cout << setw(2) << i << "*" << j << "=" << setw(2) << i * j;
            cout << endl;
	}

	for (i = 1; i < 101; i = i + 1)
	{
		sum+=i;                                       //sum=sum+i 不完全等价于 sum+=i  ("+="表示把左边的数加上右边的数的 和 赋值给左边的数的意思。)
		                                                                                //区别："=+"表示赋值，+表正，-表负，如a = +b 实际为 a = b
	}
	cout << "Sum is: " << sum << endl;
}
/* for函数的使用：
   for(初始语句;表达式1;表达式2）
   {
   循环体
   }

   for语句的执行流程是：首先执行初始语句，再判断表达式1（循环控制条件）；如果为真，
                        则执行一次循环体，否则退出循环。每执行一次循环后，要先计算
						表达式2的值，再判断表达式1，从而决定要不要继续执行循环体。
                      
*/
/*sum=sum+i 不完全等价于 sum+=i  ("+="表示把左边的数加上右边的数的 和 赋值给左边的数的意思）
1、对于同样类型的a,b来说
两个式子执行的结果确实没有什么区别。但是从编译的角度看，a+=b;执行的时候效率高。
2、对于不同类型的a,b来说
2.1 不同类型的两个变量在进行运算的时候，我们经常说到的是类型的转换问题。这里，记住两点：
    一、运算过程中，低精度的类型向高精度类型转换。
    二、如果将高精度的数值赋值给低精度类型变量，则必须要进行显性的强制转换。
2.2 对于a+=b;这个式子，要明确的一点是，+=运算中，结合了强制类型转换的功能，因此，不会出现编译错误；
    而对于a=a+b;这个式子，因为是简单的运算，没有类型转换，在编译过程中会报错。


	最好使用sum+=i
* */
